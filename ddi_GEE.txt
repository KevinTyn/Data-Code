// 选择区域和设置地图中心
var center = roi.geometry().centroid();
var lon = center.coordinates().get(0).getInfo();
var lat = center.coordinates().get(1).getInfo();
Map.setCenter(lon, lat, 11);


// 定义掩膜函数(使用JRC/GSW1_4/YearlyHistory的30m分辨率数据进行水体掩膜，根据具体要求进行掩膜选择)
// 水体掩膜
function remove_water(img) {
    var year = img.get('year')
    var jrc_year = ee.ImageCollection('JRC/GSW1_4/YearlyHistory')
            .filterDate('2021-01-01', '2021-12-31')
            .first()
            .clip(roi)
            .select('waterClass')
            .reproject('EPSG:4326',null,30)
    var Mask = jrc_year.eq(3).or(jrc_year.eq(2));  // 将永久水体和季节性水体都设为 1
    Mask = Mask.unmask(0).not();    // 此时Mask中value值有1 ， 0 ， masked，把masked转化为 0
    return img.updateMask(Mask);
}

// 云掩膜
function maskL8sr(image) {
  // Bit 0 - Fill
  // Bit 1 - Dilated Cloud
  // Bit 2 - Cirrus
  // Bit 3 - Cloud
  // Bit 4 - Cloud Shadow
  var qaMask = image.select('QA_PIXEL').bitwiseAnd(parseInt('11111', 2)).eq(0);
  var saturationMask = image.select('QA_RADSAT').eq(0);

  // Apply the scaling factors to the appropriate bands.
  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
  var thermalBands = image.select('ST_B.*').multiply(0.00341802).add(149.0);

  // Replace the original bands with the scaled ones and apply the masks.
  return image.addBands(opticalBands, null, true)
      .addBands(thermalBands, null, true)
      .updateMask(qaMask)
      .updateMask(saturationMask);
}

// 掩膜 NaN 值
function maskNaN(image) { 
  var mask = image.gte(-1000); 
  return image.updateMask(mask); 
  }


// 定义指数计算函数
// 计算NDVI
function NDVI_cal(img) {
 var ndvi_temp = img.normalizedDifference(["SR_B5","SR_B4"]);
 //print(ndvi_temp);
 return ndvi_temp;
}

// 计算湿度指数
function Wet_cal(img) {
 var blue = img.select("SR_B2");
 var green = img.select("SR_B3");
 var red = img.select("SR_B4");
 var nir = img.select("SR_B5");
 var swir1 = img.select("SR_B6");
 var swir2 = img.select("SR_B7");
 var wet_temp =blue.multiply(0.1511)
              .add(green.multiply(0.1973))
              .add(red.multiply(0.3283))
              .add(nir.multiply(0.3407))
              .add(swir1.multiply(-0.7117))
              .add(swir2.multiply(-0.4559))
 //print(wet_temp);
 return wet_temp;
}

// 计算土壤指数
function SI_cal(img) {
 var blue = img.select("SR_B2");
 var red = img.select("SR_B4");
 var nir = img.select("SR_B5");
 var swir1 = img.select("SR_B6");
 var swir2 = img.select("SR_B7");
 var SI_temp =((swir1.add(red)).subtract(blue.add(nir)))
              .divide((swir1.add(red)).add(blue.add(nir)))
 //print(SI_temp);
 return SI_temp;
}

// 计算裸露指数
function IBI_cal(img) {
 var green = img.select("SR_B3");
 var red = img.select("SR_B4");
 var nir = img.select("SR_B5");
 var swir1 = img.select("SR_B6");
 var IBI_temp =(((swir1.multiply(2.0)).divide(swir1.add(nir)))
               .subtract((nir.divide(nir.add(red))).add(green.divide(green.add(swir1)))))
               .divide((((swir1.multiply(2.0)).divide(swir1.add(nir)))
               .add((nir.divide(nir.add(red))).add(green.divide(green.add(swir1))))))
 //print(IBI_temp);
 return IBI_temp;
}

// 计算地表反射率
function Albedo_cal(img) {
    var Albedo = img.expression(
        '0.356*B + 0.130*R + 0.373*NIR + 0.085*SWIR1 + 0.072*SWIR2 - 0.0018',
        {
            'B': img.select('SR_B2'), // 蓝色波段
            'R': img.select('SR_B4'), // 红色波段
            'NIR': img.select('SR_B5'), // 近红外波段
            'SWIR1': img.select('SR_B6'), // 短波红外1波段
            'SWIR2': img.select('SR_B7') // 短波红外2波段
        }
    );
    return Albedo;
}


// 计算干旱指数 (DDI)
function DDI_cal(img) {
    var DDI_temp = img.expression(
        '-1/k * NDVI - Albedo',
        {
            'k': ee.Number(k),
            'NDVI': img.select('NDVI'),
            'Albedo': img.select('Albedo')
        }
    );
    return DDI_temp;
}



// 定义归一化函数
function img_normalize(img){
  var minMax = img.reduceRegion({
    reducer:ee.Reducer.minMax(),
    geometry: roi,
    scale: 30,
    maxPixels: 10e13,
  })
  var year = img.get('year')
  var normalize  = ee.ImageCollection.fromImages(
    img.bandNames().map(function(name){
      name = ee.String(name);
      var band = img.select(name);
      return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))));
    })
  ).toBands().rename(img.bandNames());
  var normalized = normalize.min(1).max(0);
  return normalized;
}



// LANDSAT数据输入 
var L8 = ee.ImageCollection("LANDSAT/LC08/C02/T1_L2")
    .filterDate('2023-04-01', '2023-09-30')
    .filterBounds(roi)
    .filterMetadata('CLOUD_COVER', 'less_than',10)
    .map(maskL8sr)
    .map(remove_water)
    .median() 
    
var L8_no_water = L8.clip(roi);
var img = L8_no_water.select("ST_B10");

// 形变数据输入并掩膜小于1000的值 
var def = def2.clip(roi); 
def = maskNaN(def);


// 计算并添加各类指数(four)
// lst
var lst = img.expression(
  'B1-273.15',
  {
    B1:img.select('ST_B10'),
  });
// ndvi
var ndvi = NDVI_cal(L8_no_water);
// wet
var wet = Wet_cal(L8_no_water);
var SI = SI_cal(L8_no_water);
var IBI = IBI_cal(L8_no_water);
// ndbsi
var NDBSI =(SI.add(IBI)).divide(2.0);
var Albedo = Albedo_cal(L8_no_water);

    
// 指数归一化与添加波段
// lst_normalized
var lst_normalized = img_normalize(lst);
L8_no_water = L8_no_water.addBands(lst_normalized.rename('LST').toFloat())
// ndvi_normalized
var ndvi_normalized = img_normalize(ndvi);
L8_no_water = L8_no_water.addBands(ndvi_normalized.rename('NDVI').toFloat())
// wet_normalized
var wet_normalized = img_normalize(wet);
L8_no_water = L8_no_water.addBands(wet_normalized.rename('Wet').toFloat())
// ndbsi_normalized
var ndbsi_normalized = img_normalize(NDBSI);
L8_no_water = L8_no_water.addBands(ndbsi_normalized.rename('NDBSI').toFloat())
// Albedo_normalized
var Albedo_normalized = img_normalize(Albedo);
L8_no_water = L8_no_water.addBands(Albedo_normalized.rename('Albedo').toFloat());
// def_normalized
var def_normalized = img_normalize(def);
L8_no_water = L8_no_water.addBands(def_normalized.rename('Def').toFloat());


    
// 将ndvi_normalized和Albedo_normalized添加到同一张图像上
var img = ee.Image.cat([Albedo_normalized, ndvi_normalized]);
    
// 对ndvi_normalized和Albedo_normalized进行线性回归分析
var linearFit = img.reduceRegion({
  reducer: ee.Reducer.linearFit(),
  geometry: roi,
  scale: 30,
  maxPixels: 10e13,
});
    
// 获取斜率k
var k = linearFit.get('scale');
// 打印k值
print('k:', k);
    
// 计算DDI
var DDI = DDI_cal(L8_no_water, k);
var DDI_normalized = img_normalize(DDI);

// 添加DDI到波段
L8_no_water = L8_no_water.addBands(DDI_normalized.rename('DDI').toFloat());

    
    
// // 定义颜色等级
// var ndvi_palette = ['blue', 'cyan', 'lightgreen', 'green', 'darkgreen', 'yellow', 'orange', 'lightcoral', 'red', 'darkred'];
// var ndbsi_palette = ['blue', 'cyan', 'lightgreen', 'green', 'darkgreen', 'yellow', 'orange', 'lightcoral', 'red', 'darkred'];
// var wet_palette = ['blue', 'cyan', 'lightgreen', 'green', 'darkgreen', 'yellow', 'orange', 'lightcoral', 'red', 'darkred'];
// var lst_palette = ['blue', 'cyan', 'lightgreen', 'green', 'darkgreen', 'yellow', 'orange', 'lightcoral', 'red', 'darkred'];
   

// // 将归一化的NDVI添加到地图上
// Map.addLayer(ndvi_normalized, {min: 0, max: 1, palette: ndvi_palette}, 'NDVI ' );
// Map.addLayer(ndbsi_normalized, {min: 0, max: 1, palette: ndbsi_palette}, 'NDBSI ' );
// Map.addLayer(wet_normalized, {min: 0, max: 1, palette: wet_palette}, 'WET ' );
// Map.addLayer(lst_normalized, {min: 0, max: 1, palette: lst_palette}, 'LST ');



// 主成分分析
//select bands & bandnames
// var bands = ["NDVI","Wet","LST","NDBSI","DDI"]
var bands = ["NDVI","Wet","LST","NDBSI","DDI","Def"]
var select_Image =L8_no_water.select(bands)
var scale = 30;
var bandNames = select_Image.bandNames();
// print(select_Image)
// print(bandNames)


// 图像波段重命名函数
var getNewBandNames = function(prefix) {
    var seq = ee.List.sequence(1, bandNames.length());
    return seq.map(function(b) {
      return ee.String(prefix).cat(ee.Number(b).int());
    });
  };

// 计算每个波段的均值并进行中心化处理
var meanDict = select_Image.reduceRegion({
    reducer: ee.Reducer.mean(),
    geometry: roi,
    scale: scale,
    maxPixels: 1e9
});
var means = ee.Image.constant(meanDict.values(bandNames));
var centered = select_Image.subtract(means);


// 主成分分析函数与调用 
// 主成分分析函数
var getPrincipalComponents = function(centered, scale, roi) {
   
    // 图像转为一维数组
    var arrays = centered.toArray();

    // 计算协方差矩阵
    var covar = arrays.reduceRegion({
      reducer: ee.Reducer.centeredCovariance(),
      geometry: roi,
      scale: scale,
      maxPixels: 1e9
    });
    
    
    // 获取“数组”协方差结果并转换为数组。
    // 波段与波段之间的协方差
    var covarArray = ee.Array(covar.get('array'));
    // 执行特征分析，并分割值和向量。
    var eigens = covarArray.eigen();
    // 特征值的P向量长度
    var eigenValues = eigens.slice(1, 0, 1);
    // PxP矩阵，其特征向量为行。
    var eigenVectors = eigens.slice(1, 1);

    //计算主成分特征值和贡献率
    var eigenValuesList = eigenValues.toList().flatten()
    var total = eigenValuesList.reduce(ee.Reducer.sum())
    var percentageVariance = eigenValuesList.map(function(item) {
      return (ee.Number(item).divide(total)).multiply(100).format('%.2f')
    })
    print('特征值',eigenValues )
    print("贡献率", percentageVariance)  
    print("特征向量", eigenVectors)  

    // 将中心化的图像转为数组形式，并与特征向量矩阵相乘得到主成分
    // 将图像转换为二维阵列
    var arrayImage = arrays.toArray(1);

    //使用特征向量矩阵左乘图像阵列
    var principalComponents = ee.Image(eigenVectors).matrixMultiply(arrayImage);

    // 将特征值的平方根转换为P波段图像。
    var sdImage = ee.Image(eigenValues.sqrt())
      .arrayProject([0]).arrayFlatten([getNewBandNames('sd')]);

    //将PC转换为P波段图像，通过SD标准化。
    principalComponents=principalComponents
      // 抛出一个不需要的维度，[[]]->[]。
      .arrayProject([0])
      // 使单波段阵列映像成为多波段映像，[]->image。
      .arrayFlatten([getNewBandNames('pc')])
      // 通过SDs使PC正常化。
      .divide(sdImage);
    return principalComponents
  };
  
  
//进行主成分分析，获得分析结果
var pca_Image = getPrincipalComponents(centered, scale, roi);
print(pca_Image)
//Map.addLayer(pca_Image, {"bands":["pc1"]}, 'pc1')


// MRSEI计算部分
//1-pc1 计算MRSEI的初始值
var mrsei_0 = pca_Image.expression(
  'constant - pc1', 
  {
    constant: 1,
    pc1: pca_Image.select('pc1')
  });
print(mrsei_0)
// PC1
// var mrsei_1 = pca_Image.select('pc1')

//MRSEI归一化
var mrsei = img_normalize(mrsei_0)
// var mrsei_1 = img_normalize(mrsei_1)]

// 可视化 MRSEI
// var visParam = {
//     palette: ' 522507, DF923D, F1B555, FCD163, 99B718, 74A901, 66A000, 529400,' +
//         '3E8601, 207401, 056201, 004C00, 023B01, 012E01, 011D01, 011301'
// };

var visParam = {
    palette: 'FF0000, FF7F00, FFFF00, 00FF00, 0000FF, 4B0082, 8B00FF'
};


Map.addLayer(lst_normalized, visParam, 'lst_normalized');
Map.addLayer(ndvi_normalized, visParam, 'ndvi_normalized');
Map.addLayer(wet_normalized, visParam, 'wet_normalized');
Map.addLayer(ndbsi_normalized, visParam, 'ndbsi_normalized');
Map.addLayer(DDI_normalized, visParam, 'DDI_normalized');
Map.addLayer(mrsei, visParam, 'mrsei');
Map.addLayer(def_normalized, visParam, 'Def');
Map.addLayer(L8_no_water);


// 波段名称列表
var bandsToExport = ['NDVI', 'LST', 'Wet', 'NDBSI', 'DDI', 'Def'];

// 循环导出每个波段的归一化数据
bandsToExport.forEach(function(band) {
  // 确保选择的是归一化后的波段
  var normalizedBand;
  if (band === 'NDVI') {
    normalizedBand = ndvi_normalized; // 使用已归一化的 NDVI 数据
  } else if (band === 'LST') {
    normalizedBand = lst_normalized; // 使用已归一化的 LST 数据
  } else if (band === 'Wet') {
    normalizedBand = wet_normalized; // 使用已归一化的 Wet 数据
  } else if (band === 'NDBSI') {
    normalizedBand = ndbsi_normalized; // 使用已归一化的 NDBSI 数据
  } else if (band === 'DDI') {
    normalizedBand = DDI_normalized; // 使用已归一化的 DDI 数据
  } else if (band === 'Def') {
    normalizedBand = def_normalized; // 使用已归一化的 DDI 数据
  }

  // 导出归一化后的波段
  Export.image.toDrive({
    image: normalizedBand,    // 选择已经归一化的波段
    description: band + '_2023001', // 文件名将包含波段名称+2003
    folder: 'EarthEngine',        // 存储到 Google Drive 的文件夹
    scale: 30,                   // 像素分辨率
    region: roi,                  // 导出区域
    crs: 'EPSG:4326',             // 坐标参考系
    maxPixels: 1e13                // 最大像素数
  });
});












// // 相关性分析 
// var variables = [ndvi_normalized, lst_normalized, wet_normalized, ndbsi_normalized, DDI_normalized,def_normalized];
// var variableNames = ['ndvi', 'lst','wet','ndbsi','ddi','def'];

// for (var i = 0; i < variables.length; i++) {
//     var correlation = ee.Image.cat([mrsei, variables[i]]).reduceRegion({
//       reducer: ee.Reducer.pearsonsCorrelation(),
//       geometry: roi,
//       scale: 1000,
//       maxPixels: 10e13,
//     });
//     var correlationCoefficient = correlation.get('correlation');
//     print('Correlation coefficient-mrsei/' + variableNames[i] + ':', correlationCoefficient);
// }



// Export.image.toDrive({
//   image: mrsei,
//   description: 'MRESI_20231_11-121',
//   scale: 30,
//   region: roi,
//   crs: 'EPSG:4326',
//   maxPixels: 1e13,
//   fileFormat: 'GeoTIFF',
// });




